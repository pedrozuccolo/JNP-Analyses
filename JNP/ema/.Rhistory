mutate(
id = as.numeric(str_extract(id, "^\\d+")),
init_assess_date = dmy(init_assess_date),
tria_dn_filho = dmy(tria_dn_filho)
)
#clean promis
ema_clean <- ema_jpn %>%
mutate(Código = as.numeric(substr(Código, 4, nchar(Código)))) %>%
rename(ID_JNP = Código) %>%
mutate(Data = as.POSIXct(Data, format = "%d/%m/%Y - %H:%M:%S"))
str(ema_clean)
str((ema_jpn)
str((ema_jpn)
str(ema_jpn)
glimpse(comvc_ids)
# load promis dataset
ema_jnp <- read.csv("data/comv_ema_Jun23.csv")
str(ema_jnp)
str(comvc_ids)
# merge comvc_ids and ema_jnp
ema_jnp <- merge(ema_jnp, comvc_ids, by = "Código")
str(ema_jnp)
str(participants)
str(ema_jnp)
# merge comvc_ids and ema_jnp
ema_jnp <- merge(ema_jnp, comvc_ids, by = "Código", all.x = TRUE)
str(ema_jnp)
# merge comvc_ids and ema_jnp
ema_jnp <- merge(ema_jnp, comvc_ids, by = "Código", all.x = TRUE) %>%
rename(teste = Q16)
str(ema_jnp)
#clean randomization dataset
participants_clean <- participants %>%
select(id, avaliação, X, tria_dn_filho, tria_idd_filho, tria_rcads_total_tscore, grupo) %>% # select important variables
rename(sex = X, init_assess_date = avaliação) %>%
mutate(
id = str_extract(record_id, "^\\d+"), # Extract the number part
respondent = case_when(
str_detect(record_id, "p") ~ "p", # If "p" is present
str_detect(record_id, "f") ~ "c", # If "f" is present
TRUE ~ NA_character_  # Else
)
)
# merge comvc_ids and ema_jnp
#create variable respondent (to differentiate between cases where parents or the children provided responses)
ema_jnp <- merge(ema_jnp, comvc_ids, by = "Código", all.x = TRUE) %>%
mutate(
id = str_extract(record_id, "^\\d+"), # Extract the number part
respondent = case_when(
str_detect(record_id, "p") ~ "p", # If "p" is present
str_detect(record_id, "f") ~ "c", # If "f" is present
TRUE ~ NA_character_  # Else
)
)
# merge comvc_ids and ema_jnp
#create variable respondent (to differentiate between cases where parents or the children provided responses)
ema_jnp <- merge(ema_jnp, comvc_ids, by = "Código", all.x = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = '/Users/pedrozuccolo/Desktop/RADAR-Analyses/JNP/ema')
library(dplyr)
library(lubridate)
library(stringr)
library(rvest)
# load randomization dataset
participants <- read.csv("data/randomizationJun23.csv")
str(participants)
#load dataset with ids from redcap and comvc
comvc_ids <- read.csv("data/idcomvc_idredcap.csv")
str(comvc_ids)
# load promis dataset
ema_jnp <- read.csv("data/comv_ema_Jun23.csv")
str(ema_jnp)
#clean randomization dataset
participants_clean <- participants %>%
select(id, avaliação, X, tria_dn_filho, tria_idd_filho, tria_rcads_total_tscore, grupo) %>% # select important variables
rename(sex = X, init_assess_date = avaliação) %>%
mutate(
id = as.numeric(str_extract(id, "^\\d+")),
init_assess_date = dmy(init_assess_date),
tria_dn_filho = dmy(tria_dn_filho)
)
# merge comvc_ids and ema_jnp
#create variable respondent (to differentiate between cases where parents or the children provided responses)
ema_jnp <- merge(ema_jnp, comvc_ids, by = "Código", all.x = TRUE) %>%
mutate(
id = str_extract(record_id, "^\\d+"), # Extract the number part
respondent = case_when(
str_detect(record_id, "p") ~ "p", # If "p" is present
str_detect(record_id, "f") ~ "c", # If "f" is present
TRUE ~ NA_character_  # Else
)
)
#check structure
str(ema_jnp)
# merge comvc_ids and ema_jnp
#create variable respondent (to differentiate between cases where parents or the children provided responses)
ema_jnp <- merge(ema_jnp, comvc_ids, by = "Código", all.x = TRUE) %>%
mutate(
id = as.numeric(str_extract(record_id, "^\\d+")), # Extract the number part and make it a number
respondent = case_when(
str_detect(record_id, "p") ~ "p", # If "p" is present
str_detect(record_id, "f") ~ "c", # If "f" is present
TRUE ~ NA_character_  # Else
)
)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = '/Users/pedrozuccolo/Desktop/RADAR-Analyses/JNP/ema')
library(dplyr)
library(lubridate)
library(stringr)
library(rvest)
# load randomization dataset
participants <- read.csv("data/randomizationJun23.csv")
str(participants)
#load dataset with ids from redcap and comvc
comvc_ids <- read.csv("data/idcomvc_idredcap.csv")
str(comvc_ids)
# load promis dataset
ema_jnp <- read.csv("data/comv_ema_Jun23.csv")
str(ema_jnp)
#clean randomization dataset
participants_clean <- participants %>%
select(id, avaliação, X, tria_dn_filho, tria_idd_filho, tria_rcads_total_tscore, grupo) %>% # select important variables
rename(sex = X, init_assess_date = avaliação) %>%
mutate(
id = as.numeric(str_extract(id, "^\\d+")),
init_assess_date = dmy(init_assess_date),
tria_dn_filho = dmy(tria_dn_filho)
)
# merge comvc_ids and ema_jnp
#create variable respondent (to differentiate between cases where parents or the children provided responses)
ema_jnp <- merge(ema_jnp, comvc_ids, by = "Código", all.x = TRUE) %>%
mutate(
id = as.numeric(str_extract(record_id, "^\\d+")), # Extract the number part and make it a number
respondent = case_when(
str_detect(record_id, "p") ~ "p", # If "p" is present
str_detect(record_id, "f") ~ "c", # If "f" is present
TRUE ~ NA_character_  # Else
)
)
#check structure
str(ema_jnp)
# merge comvc_ids and ema_jnp
#create variable respondent (to differentiate between cases where parents or the children provided responses)
ema_jnp <- merge(ema_jnp, comvc_ids, by = "Código", all.x = TRUE) %>%
mutate(
id = as.numeric(str_extract(record_id, "^\\d+")), # Extract the number part and make it a number
respondent = case_when(
str_detect(record_id, "p") ~ "p", # If "p" is present
str_detect(record_id, "f") ~ "c", # If "f" is present
TRUE ~ NA_character_  # Else
),
Data = dmy(Data)
)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = '/Users/pedrozuccolo/Desktop/RADAR-Analyses/JNP/ema')
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = '/Users/pedrozuccolo/Desktop/RADAR-Analyses/JNP/ema')
## Loading packages
```{r, echo=FALSE}
library(dplyr)
library(lubridate)
library(stringr)
library(rvest)
# load randomization dataset
participants <- read.csv("data/randomizationJun23.csv")
str(participants)
#load dataset with ids from redcap and comvc
comvc_ids <- read.csv("data/idcomvc_idredcap.csv")
str(comvc_ids)
# load promis dataset
ema_jnp <- read.csv("data/comv_ema_Jun23.csv")
str(ema_jnp)
# load promis dataset
ema_jnp <- read.csv("data/comv_ema_Jun23.csv")
str(ema_jnp)
#clean randomization dataset
participants_clean <- participants %>%
select(id, avaliação, X, tria_dn_filho, tria_idd_filho, tria_rcads_total_tscore, grupo) %>% # select important variables
rename(sex = X, init_assess_date = avaliação) %>%
mutate(
id = as.numeric(str_extract(id, "^\\d+")),
init_assess_date = dmy(init_assess_date),
tria_dn_filho = dmy(tria_dn_filho)
)
# merge comvc_ids and ema_jnp
#create variable respondent (to differentiate between cases where parents or the children provided responses)
ema_jnp <- merge(ema_jnp, comvc_ids, by = "Código", all.x = TRUE) %>%
mutate(
id = as.numeric(str_extract(record_id, "^\\d+")), # Extract the number part and make it a number
respondent = case_when(
str_detect(record_id, "p") ~ "p", # If "p" is present
str_detect(record_id, "f") ~ "c", # If "f" is present
TRUE ~ NA_character_  # Else
),
Data = dmy(Data)
)
# merge comvc_ids and ema_jnp
#create variable respondent (to differentiate between cases where parents or the children provided responses)
ema_jnp <- merge(ema_jnp, comvc_ids, by = "Código", all.x = TRUE) %>%
mutate(
id = as.numeric(str_extract(record_id, "^\\d+")), # Extract the number part and make it a number
respondent = case_when(
str_detect(record_id, "p") ~ "p", # If "p" is present
str_detect(record_id, "f") ~ "c", # If "f" is present
TRUE ~ NA_character_  # Else
),
Data = as.POSIXct(Data, format = "%d/%m/%Y - %H:%M:%S", tz = "America/Sao_Paulo")
)
# load randomization dataset
participants <- read.csv("data/randomizationJun23.csv")
str(participants)
#load dataset with ids from redcap and comvc
comvc_ids <- read.csv("data/idcomvc_idredcap.csv")
str(comvc_ids)
# load promis dataset
ema_jnp <- read.csv("data/comv_ema_Jun23.csv")
str(ema_jnp)
# load promis dataset
ema_jnp <- read.csv("data/comv_ema_Jun23.csv")
str(ema_jnp)
```{r}
#clean randomization dataset
participants_clean <- participants %>%
select(id, avaliação, X, tria_dn_filho, tria_idd_filho, tria_rcads_total_tscore, grupo) %>% # select important variables
rename(sex = X, init_assess_date = avaliação) %>%
mutate(
id = as.numeric(str_extract(id, "^\\d+")),
init_assess_date = dmy(init_assess_date),
tria_dn_filho = dmy(tria_dn_filho)
)
# merge comvc_ids and ema_jnp
#create variable respondent (to differentiate between cases where parents or the children provided responses)
ema_jnp <- merge(ema_jnp, comvc_ids, by = "Código", all.x = TRUE) %>%
mutate(
id = as.numeric(str_extract(record_id, "^\\d+")), # Extract the number part and make it a number
respondent = case_when(
str_detect(record_id, "p") ~ "p", # If "p" is present
str_detect(record_id, "f") ~ "c", # If "f" is present
TRUE ~ NA_character_  # Else
),
Data = as.POSIXct(Data, format = "%d/%m/%Y - %H:%M:%S", tz = "America/Sao_Paulo")
)
#check structure
str(ema_jnp)
#merge participants_clean and ema_jnp by id
esm_jnp <- merge(ema_clean, participants_clean, by = "id", all.x = TRUE)
#merge participants_clean and ema_jnp by id
esm_jnp <- merge(ema_jnp, participants_clean, by = "id", all.x = TRUE)
str(esm_jnp)
str(participants_clean)
#check structure
str(ema_jnp)
unique(ema_jnp$id)
count(unique(ema_jnp$id))
table(unique(ema_jnp$id))
sum(unique(ema_jnp$id))
unique(ema_jnp$id)
n_distinct(ema_jnp$id)
n_distinct(participants_clean$id)
#clean randomization dataset
participants_clean <- participants %>%
select(id, avaliação, X, tria_dn_filho, tria_idd_filho, tria_rcads_total_tscore, grupo) %>% # select important variables
rename(sex = X, init_assess_date = avaliação) %>%
mutate(
id = as.numeric(str_extract(id, "^\\d+")),
init_assess_date = dmy(init_assess_date),
tria_dn_filho = dmy(tria_dn_filho)
) %>%
filter(id %in% ema_jnp$id)
str(participants_clean)
#merge participants_clean and ema_jnp by id
test <- merge(participants_clean, ema_jnp, by = "id", how = TRUE)
str(test)
#merge participants_clean and ema_jnp by id
esm_df <- merge(participants_clean, ema_jnp, by = "id", how = TRUE)
str(esm_df)
#merge participants_clean and ema_jnp by id
esm_data <- merge(participants_clean, ema_jnp, by = "id", how = TRUE) %>%
select(-Código, -record_id, -Missings, -E.Mail) %>%
rename(assessment_date = Data)
str(esm_data)
#merge participants_clean and ema_jnp by id
teste <- merge(participants_clean, ema_jnp, by = "id", how = TRUE) %>%
select(-Código, -record_id, -Missings, -E.Mail) %>%
rename(assessment_date = Data, group = grupo)
str(teste)
#merge participants_clean and ema_jnp by id
esm_jnp <- merge(participants_clean, ema_jnp, by = "id", how = TRUE) %>%
select(-Código, -record_id, -Missings, -E.Mail) %>%
rename(assessment_date = Data,
group = grupo,
date_of_birth = tria_dn_filho,
age = tria_idd_filho
)
str(esm_jnp)
knitr::opts_chunk$set(echo = TRUE)
source("EMA_dataset_build.Rmd")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = '/Users/pedrozuccolo/Desktop/RADAR-Analyses/JNP/ema')
knitr::opts_knit$set(root.dir = '/Users/pedrozuccolo/Desktop/RADAR-Analyses/JNP/ema/scripts')
source("EMA_dataset_build.Rmd")
source("EMA_dataset_build.Rmd")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = '/Users/pedrozuccolo/Desktop/RADAR-Analyses/JNP/ema/scripts')
source("EMA_dataset_build.Rmd")
---
title: "EMA dataset build"
setwd('/Users/pedrozuccolo/Desktop/RADAR-Analyses/JNP/ema')
#Load packages
library(dplyr)
library(lubridate)
library(stringr)
library(rvest)
##randomization dataset
participants <- read.csv("data/randomizationJun23.csv")
str(participants)
# ids from redcap and comvc codes
comvc_ids <- read.csv("data/idcomvc_idredcap.csv")
str(comvc_ids)
## promis dataset
ema_jnp <- read.csv("data/comv_ema_Jun23.csv")
str(ema_jnp)
# Dataframe preparation
## merge comvc_ids and ema_jnp
ema_jnp <- merge(ema_jnp, comvc_ids, by = "Código", all.x = TRUE) %>%
mutate(
id = as.numeric(str_extract(record_id, "^\\d+")), # Extract the number part of id and make it a number
respondent = case_when( # create variable that differentiate responses from parents and children/adolescents
str_detect(record_id, "p") ~ "p", # If "p" is present
str_detect(record_id, "f") ~ "c", # If "f" is present
TRUE ~ NA_character_  # Else
),
Data = as.POSIXct(Data, format = "%d/%m/%Y - %H:%M:%S", tz = "America/Sao_Paulo")
)
##clean randomization dataset
participants_clean <- participants %>%
select(id, avaliação, X, tria_dn_filho, tria_idd_filho, tria_rcads_total_tscore, grupo) %>% # select important variables
rename(sex = X, init_assess_date = avaliação) %>% #rename variables
mutate(
id = as.numeric(str_extract(id, "^\\d+")), #extract number part from id and make it numeric
init_assess_date = dmy(init_assess_date), #convert init_assess_date to datetime
tria_dn_filho = dmy(tria_dn_filho) #convert dn_filho to datetime
) %>%
filter(id %in% ema_jnp$id) #filter for participants who collected EMA data
##merge participants_clean and ema_jnp by id
esm_jnp <- merge(participants_clean, ema_jnp, by = "id", how = TRUE) %>%
select(-Código, -record_id, -Missings, -E.Mail) %>%
rename(assessment_date = Data,
group = grupo,
date_of_birth = tria_dn_filho,
age = tria_idd_filho
)
str(esm_jnp)
# set working dir
setwd('/Users/pedrozuccolo/Desktop/RADAR-Analyses/JNP/ema')
# Load packages
library(dplyr)
library(lubridate)
# Load dataset
source('scripts/dataset_build.R')
#set working dir
setwd('/Users/pedrozuccolo/Desktop/RADAR-Analyses/JNP/ema')
#Load packages
library(dplyr)
library(lubridate)
library(stringr)
#Load datasets
## randomization dataset
participants <- read.csv("data/randomizationJun23.csv")
# set working dir
setwd('/Users/pedrozuccolo/Desktop/RADAR-Analyses/JNP/ema')
# Load packages
library(dplyr)
library(lubridate)
# Load dataset
source('scripts/dataset_build.R')
# check
str(esm_jnp)
# EDA
## How many observations
n_row(esm_jnp)
# EDA
## How many observations
nrow(esm_jnp)
## How many participantes contributed with data
n_distinct(esm_jnp$id)
## How many responses from the parents and how many from adolescents
table(esm_jnp$respondent)
?table()
## How many responses from the parents and how many from adolescents
table(recode(esm_jnp$respondent, 'c' == "Adolescent", 'p' = 'Parent'))
## How many responses from the parents and how many from adolescents
table(recode(esm_jnp$respondent, 'c' = "Adolescent", 'p' = 'Parent'))
## How many responses from the parents and how many from adolescents
## 4 times a day per 6 days, twice. So, there were 147 * 48 = 7056 opportunities to respond
table(recode(esm_jnp$respondent, 'c' = "Adolescent", 'p' = 'Parent'))
## how many observations per subjects?
## Count observations per subject
subject_counts <- esm_jnp %>%
group_by(id) %>%
tally()
subject_counts
# Print the counts for each subject
print(subject_counts)
# Print the counts for each subject
print(subject_counts, n=147)
## In adolescents, how many observations per subject?
## Count observations per subject
subject_counts <- esm_jnp %>%
filter(respondent == "c") %>%
group_by(id) %>%
tally()
# Print the counts for each subject
print(subject_counts, n=147)
# Compute and print the statistics based on counts
stats <- subject_counts %>%
summarise(
max_count = max(n),
min_count = min(n),
mean_count = mean(n),
median_count = median(n)
)
print(stats)
# Compute and print the statistics based on counts
stats <- subject_counts %>%
summarise(
max_responses = max(n),
min_responses = min(n),
mean_responses = mean(n),
median_responses = median(n)
)
print(stats)
#What is the most frequent value
mode_value <- subject_counts %>%
group_by(n) %>%
tally() %>%
arrange(desc(n)) %>%
slice(1) %>%
pull(n)
print(paste("Mode:", mode_value))
#What is the most frequent value
mode_value <- subject_counts %>%
group_by(n) %>%
tally() %>%
arrange(desc(n)) %>%
slice(1) %>%
pull(n)
#What is the most frequent value
mode_value <- subject_counts %>%
group_by(observation_count) %>%
tally() %>%
arrange(desc(n)) %>%
slice(1) %>%
pull(observation_count)
## In adolescents, how many observations per subject?
## Count observations per subject
subject_counts <- esm_jnp %>%
filter(respondent == "c") %>%
group_by(id) %>%
tally(name = "observation_count")
# Print the counts for each subject
print(subject_counts, n=147)
# Compute and print the statistics based on counts
stats <- subject_counts %>%
summarise(
max_responses = max(observation_count),
min_responses = min(observation_count),
mean_responses = mean(observation_count),
median_responses = median(observation_count)
)
print(stats)
#What is the most frequent value
mode_value <- subject_counts %>%
group_by(observation_count) %>%
tally() %>%
arrange(desc(n)) %>%
slice(1) %>%
pull(observation_count)
print(paste("Mode:", mode_value))
## How many adolescents responded more than 30 times?
c(subject_counts$id)
## How many adolescents responded more than 30 times?
esm_jnp %>%
filter(id %in% c(subject_counts$id))
## How many adolescents responded more than 30 times?
filtered <- esm_jnp %>%
filter(id %in% c(subject_counts$id))
str(filtered)
## How many adolescents responded more than 30 times?
filtered <- esm_jnp %>%
filter(respondent == 'c', id %in% c(subject_counts$id))
str(filtered)
## How many adolescents responded more than 30 times?
filtered <- esm_jnp %>%
filter(respondent == 'c', id %in% c(subject_counts$id > 30))
str(filtered)
## How many adolescents responded more than 30 times?
filtered <- esm_jnp %>%
filter(respondent == 'c', id %in% c(subject_counts$id > 30))
str(filtered)
## How many adolescents responded more than 30 times?
valid_subjects <- subject_counts %>%
filter(observation_count > 30)
str(valid_subjects)
## How many adolescents responded more than 30 times?
str(subject_counts$observation_count)
## How many adolescents responded more than 30 times?
table(subject_counts$observation_count)
## How many adolescents responded more than 30 times?
table(subject_counts$observation_count)
?tally()
